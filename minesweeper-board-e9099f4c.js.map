{"version":3,"file":"minesweeper-board-e9099f4c.js","sources":["../src/memoize.js","../src/square-machine.js","../node_modules/lit-html/directives/class-map.js","../src/minesweeper-square.js","../src/minesweeper-board.js"],"sourcesContent":["const valueSymbol = Symbol('value');\n\nexport function memoize(cb) {\n  const memos = new Map();\n  return (...args) => {\n    let memo = memos;\n    let i = 0;\n    const ct = args.length;\n    while (memo.has(args[i]) && i < ct - 1) {\n      memo = memo.get(args[i]);\n      i += 1;\n    }\n    if (i === ct - 1 && memo.has(valueSymbol)) {\n      memo = memo.get(valueSymbol);\n    } else {\n      while (i < ct) {\n        memo.set(args[i], new Map());\n        memo = memo.get(args[i]);\n        i += 1;\n      }\n      memo.set(valueSymbol, cb(...args));\n      memo = memo.get(valueSymbol);\n    }\n    return memo;\n  };\n}\n","export const squareMachine = {\n  initial: 'INIT',\n  states: {\n    INIT: {\n      on: {\n        MINE: 'MINE',\n        NOT_MINE: 'NOT_MINE',\n      },\n    },\n    NOT_MINE: {\n      on: {\n        MARKED: 'MARKED',\n        PLAYED: 'PLAYED',\n      },\n    },\n    MINE: {\n      on: {\n        MARKED: 'MARKED_MINE',\n        PLAYED: 'TRIPPED',\n      },\n    },\n    MARKED: {\n      on: {\n        UNMARKED: 'NOT_MINE',\n      },\n    },\n    PLAYED: {\n      on: {},\n    },\n    MARKED_MINE: {\n      on: {\n        UNMARKED: 'MINE',\n      },\n    },\n    TRIPPED: {\n      on: {},\n    },\n  },\n};\n\nexport const squareTransition = (state, event) => {\n  if (!state) return squareMachine.initial;\n  return squareMachine.states[state].on[event] || state;\n};\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst classMapCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    // handle static classes\n    if (!classMapCache.has(part)) {\n        element.className = committer.strings.join(' ');\n    }\n    const { classList } = element;\n    // remove old classes that no longer apply\n    const oldInfo = classMapCache.get(part);\n    for (const name in oldInfo) {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n        }\n    }\n    // add new classes\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        if (!oldInfo || value !== oldInfo[name]) {\n            // We explicitly want a loose truthy check here because\n            // it seems more convenient that '' and 0 are skipped.\n            const method = value ? 'add' : 'remove';\n            classList[method](name);\n        }\n    }\n    classMapCache.set(part, classInfo);\n});\n//# sourceMappingURL=class-map.js.map","import { LitElement, html, css } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\n\nclass MinesweeperSquare extends LitElement {\n  static get properties() {\n    return {\n      canFocus: { type: Boolean, attribute: 'can-focus' },\n      neighbors: { type: Number },\n      state: { type: String },\n      column: { type: Number },\n      row: { type: Number },\n    };\n  }\n\n  constructor() {\n    super();\n    this.state = 'INIT';\n    this.neighbors = 0;\n    this.column = 0;\n    this.row = 0;\n  }\n\n  _dangerLevel() {\n    switch (this.state) {\n      case 'MARKED':\n      case 'MARKED_MINE':\n        return 'm';\n      case 'TRIPPED':\n        return 'x';\n      case 'PLAYED':\n        return this.neighbors || '';\n      case 'MINE':\n      case 'NOT_MINE':\n      default:\n        return '';\n    }\n  }\n\n  play() {\n    if (['MARKED', 'MARKED_MINE'].includes(this.state)) return;\n    this.dispatchEvent(new CustomEvent('minesweeper-played'));\n  }\n\n  mark(e) {\n    e.preventDefault();\n    if (this.state === 'PLAYED') {\n      this.play();\n      return;\n    }\n    this.dispatchEvent(\n      new CustomEvent('minesweeper-marked', {\n        detail: {\n          marked: ['MARKED', 'MARKED_MINE'].includes(this.state),\n        },\n      }),\n    );\n  }\n\n  focus() {\n    this.shadowRoot.querySelector('button').focus();\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: flex;\n          line-height: var(--minesweeper-square-size, 25px);\n          text-align: center;\n        }\n        .square {\n          cursor: pointer;\n          box-sizing: border-box;\n          width: 100%;\n          height: 100%;\n          border: 4px outset;\n          background: var(--color-square-background, #cecece);\n          font-weight: bold;\n          font-family: monospace;\n          font-size: 2em;\n          -webkit-user-select: none; /* Chrome all / Safari all */\n          -moz-user-select: none; /* Firefox all */\n          -ms-user-select: none; /* IE 10+ */\n          user-select: none; /* Likely future */\n        }\n        .square:focus {\n          transform: translateZ(0);\n          outline: 2px solid var(--color-square-focus, blue);\n          outline-offset: -10px;\n        }\n        .played {\n          border: 1px solid var(--color-square-border, #999);\n        }\n        .played:focus {\n          outline-offset: -5px;\n        }\n        .low {\n          color: var(--color-danger-low, blue);\n        }\n        .medium {\n          color: var(--color-danger-medium, green);\n        }\n        .high {\n          color: var(--color-danger-high, red);\n        }\n        .worry {\n          color: var(--color-danger-worry, darkred);\n        }\n        .dead {\n          background: var(--color-dead, red);\n        }\n      `,\n    ];\n  }\n\n  testDangerLevel(dangerLevel, threashold = -1) {\n    return this.state === 'PLAYED' && dangerLevel > threashold;\n  }\n\n  get squareType() {\n    switch (this.state) {\n      case 'PLAYED':\n        return 'Played';\n      case 'MARKED':\n      case 'MARKED_MINE':\n        return 'Marked';\n      default:\n        return 'Playable';\n    }\n  }\n\n  render() {\n    const dangerLevel = this._dangerLevel();\n    return html`\n      <button\n        class=${classMap({\n          square: true,\n          played: ['PLAYED', 'TRIPPED'].includes(this.state),\n          low: this.testDangerLevel(dangerLevel),\n          medium: this.testDangerLevel(dangerLevel, 1),\n          high: this.testDangerLevel(dangerLevel, 2),\n          worry: this.testDangerLevel(dangerLevel, 5),\n          dead: this.state === 'TRIPPED',\n        })}\n        tabindex=${this.canFocus ? '0' : '-1'}\n        @click=${this.play}\n        @contextmenu=${this.mark}\n        aria-label=${`${this.squareType} Square: Column ${this.column + 1}, Row ${this.column + 1}`}\n      >\n        ${dangerLevel}\n      </button>\n    `;\n  }\n}\n\ncustomElements.define('minesweeper-square', MinesweeperSquare);\n","import { LitElement, html, css } from 'lit-element';\n\nimport { memoize } from './memoize.js';\nimport { squareTransition } from './square-machine.js';\nimport { defaultBoard } from './constants.js';\nimport './minesweeper-square.js';\n\nconst status = {\n  DEAD: 'dead',\n  PLAYING: 'playing',\n};\n\nconst defaultFocusedSquare = [0, 0];\n\nclass MinesweeperBoard extends LitElement {\n  static get properties() {\n    return {\n      moves: { type: Number },\n      board: { type: Array },\n      marks: { type: Number },\n      mines: { type: Number },\n      status: { type: String },\n      focusedSquare: { type: Array },\n    };\n  }\n\n  constructor() {\n    super();\n    this.board = defaultBoard;\n    this.moves = 0;\n    this.marks = 0;\n    this.mines = 0;\n    this.status = status.PLAYING;\n    this.focusedSquare = defaultFocusedSquare;\n    this.handleKeydown = this.handleKeydown.bind(this);\n  }\n\n  get board() {\n    return this._board;\n  }\n\n  set board(board) {\n    if (board === this.board) return;\n    const old = this.board;\n    this._board = board;\n    this.memoizedGetNeighboringMines = memoize(this._getNeighboringMines.bind(this));\n    this.requestUpdate('board', old);\n  }\n\n  _getNeighbors(across, down, ...needles) {\n    let neighbors = 0;\n    let square;\n    for (let i = -1; i <= 1; i += 1) {\n      if (this.board[across + i]) {\n        for (let j = -1; j <= 1; j += 1) {\n          square = this.board[across + i][down + j];\n          if (square) {\n            if (i !== 0 || j !== 0) {\n              if (needles.includes(square.state)) {\n                neighbors += 1;\n              }\n            }\n          }\n        }\n      }\n    }\n    return neighbors;\n  }\n\n  _getNeighboringMines(...args) {\n    return this._getNeighbors(...args, 'MINE', 'MARKED_MINE', 'TRIPPED');\n  }\n\n  _getNeighboringMarks(...args) {\n    return this._getNeighbors(...args, 'MARKED', 'MARKED_MINE');\n  }\n\n  _playNeighbors(across, down, unsafe) {\n    for (let i = -1; i <= 1; i += 1) {\n      if (this.board[across + i]) {\n        for (let j = -1; j <= 1; j += 1) {\n          const square = this.board[across + i][down + j];\n          if (square) {\n            if (unsafe || square.state === 'NOT_MINE') {\n              square.state = squareTransition(square.state, 'PLAYED');\n              if (square.state === 'TRIPPED') {\n                this.status = status.DEAD;\n              } else if (\n                !['MARKED', 'MARKED_MINE'].includes(square.state) &&\n                this.memoizedGetNeighboringMines(across + i, down + j) === 0\n              ) {\n                this._playNeighbors(across + i, down + j);\n              }\n            }\n          }\n        }\n      }\n    }\n    this.moves += 1;\n  }\n\n  _played(e) {\n    if (this.status === status.DEAD) return;\n    const { column, row } = e.target;\n    const square = this.board[column][row];\n    this.focusedSquare = [column, row];\n    if (square.state === 'PLAYED') {\n      const unsafe = true;\n      if (\n        this.memoizedGetNeighboringMines(column, row) === this._getNeighboringMarks(column, row)\n      ) {\n        this._playNeighbors(column, row, unsafe);\n      } else {\n        return;\n      }\n    } else if (square.state === 'MINE') {\n      this.status = status.DEAD;\n    } else if (!this.memoizedGetNeighboringMines(column, row)) {\n      this._playNeighbors(column, row);\n    }\n    square.state = squareTransition(square.state, 'PLAYED');\n    this.moves += 1;\n  }\n\n  _marked(e) {\n    const { column, row } = e.target;\n    const square = this.board[column][row];\n    this.focusedSquare = [column, row];\n    square.state = squareTransition(square.state, e.detail.marked ? 'UNMARKED' : 'MARKED');\n    this.marks += square.state === 'MARKED' || square.state === 'MARKED_MINE' ? 1 : -1;\n    this.moves += 1;\n  }\n\n  handleKeydown(e) {\n    let { column, row } = e.composedPath()[0].getRootNode().host;\n    const offset = e.shiftKey ? 5 : 1;\n    switch (e.key) {\n      case 'ArrowDown':\n        row = this.board[0].length + row + offset;\n        break;\n      case 'ArrowUp':\n        row = this.board[0].length + row - offset;\n        break;\n      case 'ArrowLeft':\n        column = this.board.length + column - offset;\n        break;\n      case 'ArrowRight':\n        column = this.board.length + column + offset;\n        break;\n      case 'm':\n        this.shadowRoot.querySelector(`[column=\"${column}\"][row=\"${row}\"]`).mark(e);\n        break;\n      default:\n        break;\n    }\n    this.focusedSquare = [column % this.board.length, row % this.board[0].length];\n  }\n\n  focusBoard() {\n    window.addEventListener('keydown', this.handleKeydown);\n  }\n\n  blurBoard() {\n    window.removeEventListener('keydown', this.handleKeydown);\n  }\n\n  isFocusedSquare(across, down) {\n    if (this.focusedSquare === defaultFocusedSquare) {\n      return across === 0 && down === 0;\n    }\n    return across === this.focusedSquare[0] && down === this.focusedSquare[1];\n  }\n\n  get focusedSquareSelector() {\n    const [column, row] = this.focusedSquare;\n    return `[column=\"${column}\"][row=\"${row}\"]`;\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          position: relative;\n          display: grid;\n          flex-grow: 1;\n          grid-auto-flow: column;\n          grid-template-columns: repeat(var(--columns), 1fr);\n          grid-template-rows: repeat(var(--rows), 1fr);\n        }\n        .status {\n          position: absolute;\n          bottom: 100%;\n          right: 0;\n          line-height: 48px;\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return html`\n      <div class=\"status\">\n        ${this.marks}/${this.mines}\n      </div>\n      ${this.board.map((column, across) =>\n        column.map(\n          (square, down) => html`\n            <minesweeper-square\n              state=${square.state}\n              neighbors=${this.memoizedGetNeighboringMines(across, down)}\n              column=${across}\n              row=${down}\n              ?can-focus=${this.isFocusedSquare(across, down)}\n              @minesweeper-played=${this._played}\n              @minesweeper-marked=${this._marked}\n              @focus=${this.focusBoard}\n              @blur=${this.blurBoard}\n            ></minesweeper-square>\n          `,\n        ),\n      )}\n    `;\n  }\n\n  updated(changes) {\n    if (changes.has('status') && this.status === status.DEAD) {\n      this.dispatchEvent(\n        new CustomEvent('minesweeper-game-over', { bubbles: true, composed: true }),\n      );\n    } else if (changes.has('mines')) {\n      this.marks = 0;\n      this.status = status.PLAYING;\n      this.focusedSquare = defaultFocusedSquare;\n    } else {\n      const square = this.shadowRoot.querySelector(this.focusedSquareSelector);\n      square.updateComplete.then(() => {\n        square.focus();\n      });\n    }\n  }\n}\n\ncustomElements.define('minesweeper-board', MinesweeperBoard);\n"],"names":["valueSymbol","Symbol","squareMachine","initial","states","INIT","on","MINE","NOT_MINE","MARKED","PLAYED","UNMARKED","MARKED_MINE","TRIPPED","squareTransition","state","event","classMapCache","WeakMap","classMap","directive","classInfo","part","AttributePart","PropertyPart","committer","name","parts","length","Error","element","has","className","strings","join","classList","oldInfo","get","remove","value","set","customElements","define","LitElement","canFocus","type","Boolean","attribute","neighbors","Number","String","column","row","constructor","_dangerLevel","this","play","includes","dispatchEvent","CustomEvent","mark","e","preventDefault","detail","marked","focus","shadowRoot","querySelector","css","testDangerLevel","dangerLevel","threashold","render","html","square","played","low","medium","high","worry","dead","squareType","status","DEAD","PLAYING","defaultFocusedSquare","moves","board","Array","marks","mines","focusedSquare","defaultBoard","handleKeydown","bind","_board","old","memoizedGetNeighboringMines","cb","memos","Map","memo","i","ct","arguments","memoize","_getNeighboringMines","requestUpdate","_getNeighbors","across","down","needles","j","args","_getNeighboringMarks","_playNeighbors","unsafe","_played","target","_marked","composedPath","getRootNode","host","offset","shiftKey","key","focusBoard","window","addEventListener","blurBoard","removeEventListener","isFocusedSquare","map","updated","changes","bubbles","composed","focusedSquareSelector","updateComplete","then"],"mappings":"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"}