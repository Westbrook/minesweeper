{"version":3,"file":"minesweeper-app.js","sources":["../../node_modules/lit-html/lib/directive.js","../../node_modules/lit-html/lib/dom.js","../../node_modules/lit-html/lib/part.js","../../node_modules/lit-html/lib/template.js","../../node_modules/lit-html/lib/template-instance.js","../../node_modules/lit-html/lib/template-result.js","../../node_modules/lit-html/lib/parts.js","../../node_modules/lit-html/lib/default-template-processor.js","../../node_modules/lit-html/lib/template-factory.js","../../node_modules/lit-html/lib/render.js","../../node_modules/lit-html/lit-html.js","../../node_modules/lit-html/lib/modify-template.js","../../node_modules/lit-html/lib/shady-render.js","../../node_modules/lit-element/lib/updating-element.js","../../node_modules/lit-element/lib/css-tag.js","../../node_modules/lit-element/lit-element.js","../../node_modules/lit-html/directives/class-map.js","../../src/minesweeper-square.js","../../src/minesweeper-board.js","../../src/minesweeper-menu.js","../../src/minesweeper-app.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? marker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this.__commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = template.element.content;\n    insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                // tslint:disable-next-line:no-any no symbol in index\n                const oldValue = this[name];\n                // tslint:disable-next-line:no-any no symbol in index\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete before\n        // connection and if one is pending connection the `_hasConnectionResolver`\n        // will exist. If so, resolve it to complete the update, otherwise\n        // requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.0.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst classMapCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    // handle static classes\n    if (!classMapCache.has(part)) {\n        element.className = committer.strings.join(' ');\n    }\n    const { classList } = element;\n    // remove old classes that no longer apply\n    const oldInfo = classMapCache.get(part);\n    for (const name in oldInfo) {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n        }\n    }\n    // add new classes\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        if (!oldInfo || value !== oldInfo[name]) {\n            // We explicitly want a loose truthy check here because\n            // it seems more convenient that '' and 0 are skipped.\n            const method = value ? 'add' : 'remove';\n            classList[method](name);\n        }\n    }\n    classMapCache.set(part, classInfo);\n});\n//# sourceMappingURL=class-map.js.map","import { LitElement, html, css } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\n\nclass MinesweeperSquare extends LitElement {\n  static get properties() {\n    return {\n      canFocus: { type: Boolean, attribute: 'can-focus' },\n      mine: { type: Boolean },\n      neighbors: { type: Number },\n      played: { type: Boolean },\n      marked: { type: Boolean },\n      column: { type: Number },\n      row: { type: Number },\n    };\n  }\n\n  constructor() {\n    super();\n    this.mine = false;\n    this.neighbors = 0;\n    this.played = false;\n    this.marked = false;\n    this.column = 0;\n    this.row = 0;\n  }\n\n  _dangerLevel() {\n    if (this.marked) return 'm';\n    if (!this.played) return '';\n    if (this.mine) return 'X';\n    return this.neighbors || '';\n  }\n\n  play() {\n    if (this.marked) return;\n    this.dispatchEvent(new CustomEvent('minesweeper-played', { composed: true }));\n  }\n\n  mark(e) {\n    e.preventDefault();\n    if (this.played) {\n      this.play();\n      return;\n    }\n    this.dispatchEvent(\n      new CustomEvent('minesweeper-marked', { composed: true, detail: { marked: this.marked } }),\n    );\n  }\n\n  focus() {\n    this.shadowRoot.querySelector('button').focus();\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: flex;\n          line-height: var(--minesweeper-square-size, 25px);\n          text-align: center;\n        }\n        .square {\n          cursor: pointer;\n          box-sizing: border-box;\n          width: 100%;\n          height: 100%;\n          border: 4px outset;\n          background: var(--color-square-background, #cecece);\n          font-weight: bold;\n          font-family: monospace;\n          font-size: 2em;\n          -webkit-user-select: none; /* Chrome all / Safari all */\n          -moz-user-select: none; /* Firefox all */\n          -ms-user-select: none; /* IE 10+ */\n          user-select: none; /* Likely future */\n        }\n        .square:focus {\n          transform: translateZ(0);\n          outline: 2px solid var(--color-square-focus, blue);\n          outline-offset: -10px;\n        }\n        .played {\n          border: 1px solid var(--color-square-border, #999);\n        }\n        .played:focus {\n          outline-offset: -5px;\n        }\n        .low {\n          color: var(--color-danger-low, blue);\n        }\n        .medium {\n          color: var(--color-danger-medium, green);\n        }\n        .high {\n          color: var(--color-danger-high, red);\n        }\n        .worry {\n          color: var(--color-danger-worry, darkred);\n        }\n        .dead {\n          background: var(--color-dead, red);\n        }\n      `,\n    ];\n  }\n\n  render() {\n    const dangerLevel = this._dangerLevel();\n    return html`\n      <button\n        class=${classMap({\n          square: true,\n          played: this.played,\n          low: !this.mine && this.played,\n          medium: !this.mine && this.played && dangerLevel > 1,\n          high: !this.mine && this.played && dangerLevel > 2,\n          worry: !this.mine && this.played && dangerLevel > 5,\n          dead: this.played && this.mine,\n        })}\n        tabindex=${this.canFocus ? '0' : '-1'}\n        @click=${this.play}\n        @contextmenu=${this.mark}\n        aria-label=${`${this.played ? 'Played' : 'Playable'} Square: Column ${this.column +\n          1}, Row ${this.column + 1}`}\n      >\n        ${dangerLevel}\n      </button>\n    `;\n  }\n}\n\ncustomElements.define('minesweeper-square', MinesweeperSquare);\n","import { LitElement, html, css } from 'lit-element';\n\nimport './minesweeper-square.js';\n\nconst status = {\n  DEAD: 'dead',\n  PLAYING: 'playing',\n};\n\nconst defaultFocusedSquare = [0, 0];\n\nclass MinesweeperBoard extends LitElement {\n  static get properties() {\n    return {\n      board: { type: Array },\n      marks: { type: Number },\n      mines: { type: Number },\n      status: { type: String },\n      focusedSquare: { type: Array },\n    };\n  }\n\n  constructor() {\n    super();\n    this.board = [];\n    this.marks = 0;\n    this.mines = 0;\n    this.status = status.PLAYING;\n    this.focusedSquare = defaultFocusedSquare;\n    this.handleKeydown = this.handleKeydown.bind(this);\n  }\n\n  _getNeighbors(across, down, needle) {\n    let neighbors = 0;\n    let square;\n    for (let i = -1; i <= 1; i += 1) {\n      if (this.board[across + i]) {\n        for (let j = -1; j <= 1; j += 1) {\n          square = this.board[across + i][down + j];\n          if (square) {\n            if (i !== 0 || j !== 0) {\n              if (square[needle]) {\n                neighbors += 1;\n              }\n            }\n          }\n        }\n      }\n    }\n    return neighbors;\n  }\n\n  _getNeighboringMines(...args) {\n    return this._getNeighbors(...args, 'mine');\n  }\n\n  _getNeighboringMarks(...args) {\n    return this._getNeighbors(...args, 'marked');\n  }\n\n  _playNeighbors(across, down, unsafe) {\n    for (let i = across - 1; i <= across + 1; i += 1) {\n      if (this.board[i]) {\n        for (let j = down - 1; j <= down + 1; j += 1) {\n          if (this.board[i][j]) {\n            const square = this.board[i][j];\n            if ((unsafe || !square.mine) && !square.played && !square.marked) {\n              square.played = true;\n              if (square.mine) {\n                this.status = status.DEAD;\n              }\n              if (!this._getNeighboringMines(i, j)) this._playNeighbors(i, j);\n            }\n          }\n        }\n      }\n    }\n    this.board = [...this.board];\n  }\n\n  _played(e) {\n    if (this.status === status.DEAD) return;\n    const { column, row } = e.target;\n    const square = this.board[column][row];\n    this.focusedSquare = [column, row];\n    if (square.played) {\n      const unsafe = true;\n      if (this._getNeighboringMines(column, row) === this._getNeighboringMarks(column, row)) {\n        this._playNeighbors(column, row, unsafe);\n      } else {\n        return;\n      }\n    } else if (square.mine) {\n      this.status = status.DEAD;\n    } else if (!this._getNeighboringMines(column, row)) {\n      this._playNeighbors(column, row);\n    }\n    square.played = true;\n    this.board = [...this.board];\n  }\n\n  _marked(e) {\n    const { column, row } = e.target;\n    const square = this.board[column][row];\n    this.focusedSquare = [column, row];\n    square.marked = !e.detail.marked;\n    this.marks += square.marked ? 1 : -1;\n    this.board = [...this.board];\n  }\n\n  handleKeydown(e) {\n    let { column, row } = e.composedPath()[0].getRootNode().host;\n    const offset = e.shiftKey ? 5 : 1;\n    switch (e.key) {\n      case 'ArrowDown':\n        row = (this.board[0].length + row + offset) % this.board[0].length;\n        break;\n      case 'ArrowUp':\n        row = (this.board[0].length + row - offset) % this.board[0].length;\n        break;\n      case 'ArrowLeft':\n        column = (this.board.length + column - offset) % this.board.length;\n        break;\n      case 'ArrowRight':\n        column = (this.board.length + column + offset) % this.board.length;\n        break;\n      case 'm':\n        this.shadowRoot.querySelector(`[column=\"${column}\"][row=\"${row}\"]`).mark(e);\n        break;\n      default:\n        break;\n    }\n    this.focusedSquare = [column, row];\n  }\n\n  focusBoard() {\n    window.addEventListener('keydown', this.handleKeydown);\n  }\n\n  blurBoard() {\n    window.removeEventListener('keydown', this.handleKeydown);\n  }\n\n  isFocusedSquare(across, down) {\n    if (this.focusedSquare === defaultFocusedSquare) {\n      return across === 0 && down === 0;\n    }\n    return across === this.focusedSquare[0] && down === this.focusedSquare[1];\n  }\n\n  get focusedSquareSelector() {\n    const [column, row] = this.focusedSquare;\n    return `[column=\"${column}\"][row=\"${row}\"]`;\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          position: relative;\n          display: grid;\n          flex-grow: 1;\n          grid-auto-flow: column;\n          grid-template-columns: repeat(var(--columns), 1fr);\n          grid-template-rows: repeat(var(--rows), 1fr);\n        }\n        .status {\n          position: absolute;\n          bottom: 100%;\n          right: 0;\n          line-height: 48px;\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return html`\n      <div class=\"status\">\n        ${this.marks}/${this.mines}\n      </div>\n      ${this.board.map((column, across) =>\n        column.map(\n          (square, down) => html`\n            <minesweeper-square\n              .mine=${square.mine}\n              .marked=${square.marked}\n              .neighbors=${this._getNeighboringMines(across, down)}\n              .played=${square.played}\n              column=${across}\n              row=${down}\n              ?can-focus=${this.isFocusedSquare(across, down)}\n              @minesweeper-played=${this._played}\n              @minesweeper-marked=${this._marked}\n              @focus=${this.focusBoard}\n              @blur=${this.blurBoard}\n            ></minesweeper-square>\n          `,\n        ),\n      )}\n    `;\n  }\n\n  updated(changes) {\n    if (changes.has('status') && this.status === status.DEAD) {\n      this.dispatchEvent(\n        new CustomEvent('minesweeper-game-over', { bubbles: true, composed: true }),\n      );\n    } else if (changes.has('mines')) {\n      this.marks = 0;\n      this.status = status.PLAYING;\n      this.focusedSquare = defaultFocusedSquare;\n    } else {\n      const square = this.shadowRoot.querySelector(this.focusedSquareSelector);\n      square.updateComplete.then(() => {\n        square.focus();\n      });\n    }\n  }\n}\n\ncustomElements.define('minesweeper-board', MinesweeperBoard);\n","import { LitElement, html, css } from 'lit-element';\n\nconst difficultyLevels = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nclass MinesweeperMenu extends LitElement {\n  static get properties() {\n    return {\n      difficulty: { type: Number },\n    };\n  }\n\n  constructor() {\n    super();\n    this.difficulty = 1;\n  }\n\n  _newGame() {\n    this.dispatchEvent(\n      new CustomEvent('minesweeper-new-game', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          difficulty: this.difficulty,\n        },\n      }),\n    );\n  }\n\n  _changeDifficulty(e) {\n    this.difficulty = e.target.value;\n    this._newGame();\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: flex;\n          align-items: center;\n          flex-shrink: 0;\n          height: 48px;\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return html`\n      <button @click=${this._newGame}>New Game</button>\n      <label>\n        Difficulty\n        <select @change=${this._changeDifficulty}>\n          <option disabled>Select Difficulty</option>\n          ${difficultyLevels.map(\n            (_, level) => html`\n              <option value=${level + 1} ?selected=${this.difficulty === level + 1}\n                >${level + 1}</option\n              >\n            `,\n          )}\n        </select>\n      </label>\n    `;\n  }\n}\n\ncustomElements.define('minesweeper-menu', MinesweeperMenu);\n","import { LitElement, html, css } from 'lit-element';\n\nimport './minesweeper-board.js';\nimport './minesweeper-menu.js';\n\n/*!\n * Copyright 2015 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\n/*\n * @see https://developers.google.com/web/updates/2015/08/using-requestidlecallback\n */\nwindow.requestIdleCallback =\n  window.requestIdleCallback ||\n  function(cb) {\n    return setTimeout(() => {\n      const start = Date.now();\n      cb({\n        didTimeout: false,\n        timeRemaining() {\n          return Math.max(0, 50 - (Date.now() - start));\n        },\n      });\n    }, 1);\n  };\n\nwindow.cancelIdleCallback =\n  window.cancelIdleCallback ||\n  function(id) {\n    clearTimeout(id);\n  };\n\nclass MinesweeperApp extends LitElement {\n  static get properties() {\n    return {\n      width: { type: Number },\n      height: { type: Number },\n      board: { type: Array },\n      mines: {\n        type: Number,\n        hasChanged() {\n          return false;\n        },\n      },\n      difficulty: { type: Number },\n      squareSize: { type: Number },\n    };\n  }\n\n  constructor() {\n    super();\n    this.width = 0;\n    this.height = 0;\n    this.board = [];\n    this.mines = 0;\n    this.difficulty = 5;\n    this.squareSize = 50;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.requestIdleCallback(this.measure.bind(this));\n  }\n\n  measure() {\n    const width = this.offsetWidth;\n    const height = this.offsetHeight;\n    this.width = width;\n    this.height = height;\n    this.startNewGame();\n  }\n\n  startNewGame(e = { detail: { difficulty: false } }) {\n    if (e.detail.difficulty) {\n      this.difficulty = e.detail.difficulty;\n    }\n    this.createBoard();\n  }\n\n  createBoard() {\n    let across = Math.floor(this.width / this.squareSize);\n    let down = Math.floor(this.height / this.squareSize);\n    const downCount = down;\n    const board = Array(across);\n    this.mines = 0;\n    this.style.setProperty('--columns', across);\n    this.style.setProperty('--rows', down);\n    while (across) {\n      across -= 1;\n      board[across] = Array(down);\n      down = downCount;\n      while (down) {\n        down -= 1;\n        board[across][down] = this._setSquare();\n      }\n    }\n    this.board = board;\n  }\n\n  _setSquare() {\n    const isMine = Math.round(Math.random() * 100) <= this.difficulty * 4;\n    if (isMine) this.mines += 1;\n    const square = {\n      mine: isMine,\n      played: false,\n      marked: false,\n    };\n    return square;\n  }\n\n  _gameOver() {\n    requestIdleCallback(() => this._requestNewGame());\n  }\n\n  _requestNewGame() {\n    if (window.confirm('Game Over.\\n\\n\\nStart a new game?')) {\n      this.startNewGame();\n    }\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: flex;\n          flex-direction: column;\n          flex-grow: 1;\n          height: 100vh;\n\n          --minesweeper-square-size: 50px;\n        }\n        .dark-theme {\n          --color-square-background: black;\n          --color-square-focus: neongreen;\n          --color-square-border: lightblue;\n          --color-danger-low: green;\n          --color-danger-medium: yellow;\n          --color-danger-high: orange;\n          --color-danger-worry: red;\n          --color-dead: white;\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return html`\n      <minesweeper-menu\n        difficulty=\"${this.difficulty}\"\n        @minesweeper-new-game=${this.startNewGame}\n      ></minesweeper-menu>\n      <minesweeper-board\n        .board=${this.board}\n        .mines=${this.mines}\n        @minesweeper-game-over=${this._gameOver}\n      ></minesweeper-board>\n    `;\n  }\n}\n\ncustomElements.define('minesweeper-app', MinesweeperApp);\n"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","result","element","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","length","values","node","nextNode","nodeType","hasAttributes","attributes","_length","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","_strings","lastIndex","_i","insert","s","createMarker","match","createTextNode","insertBefore","_parent","previousSibling","_i2","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","this","setValue","_part","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","_part2","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","value","_typeof","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","templateFactory","update","instance","_clone","itemPart","itemParts","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","eventOptionsSupported","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","_this2","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","_style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","style","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","Boolean","Object","JSON","stringify","fromAttribute","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","UpdatingElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","HTMLElement","_saveInstanceProperties","_requestUpdate","constructor","_classProperties","_v","p","hasOwnProperty","_this3","_attributeToProperty","ctor","attr","_attributeNameForProperty","attrValue","_propertyValueToAttribute","propName","_attributeToPropertyMap","_propertyValueFromAttribute","oldValue","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","previousUpdatePromise","res","rej","reject","_hasConnected","_this4","performUpdate","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","k","_this5","_propertyToAttribute","superProperties","getPrototypeOf","_this6","_ensureClassProperties","noAccessor","prototype","defineProperty","configurable","enumerable","finalized","superCtor","finalize","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","_this7","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","LitElement","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","_styles","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","hasUpdated","styleElement","templateResult","render","_this","_getUniqueStyles","userStyles","reduceRight","unshift","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","litRender","delete","f","classMapCache","classMap","classInfo","className","classList","oldInfo","remove","_name","d","MinesweeperSquare","mine","neighbors","played","marked","column","row","canFocus","dispatchEvent","CustomEvent","composed","preventDefault","play","detail","shadowRoot","focus","dangerLevel","_dangerLevel","square","low","medium","high","worry","dead","mark","define","status","DEAD","PLAYING","defaultFocusedSquare","MinesweeperBoard","board","marks","mines","focusedSquare","handleKeydown","bind","across","down","needle","j","args","_getNeighbors","unsafe","_getNeighboringMines","_playNeighbors","target","_getNeighboringMarks","composedPath","getRootNode","offset","shiftKey","isFocusedSquare","_played","_marked","focusBoard","blurBoard","changes","bubbles","focusedSquareSelector","then","difficultyLevels","MinesweeperMenu","difficulty","_newGame","_changeDifficulty","_","level","requestIdleCallback","cb","setTimeout","Date","now","didTimeout","timeRemaining","max","cancelIdleCallback","id","clearTimeout","MinesweeperApp","width","height","squareSize","measure","offsetWidth","offsetHeight","startNewGame","createBoard","floor","downCount","setProperty","_setSquare","isMine","round","_requestNewGame","confirm","_gameOver"],"mappings":"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"}