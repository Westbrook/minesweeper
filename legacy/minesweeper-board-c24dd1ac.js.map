{"version":3,"file":"minesweeper-board-c24dd1ac.js","sources":["../../src/memoize.js","../../src/square-machine.js","../../node_modules/lit-html/directives/class-map.js","../../src/minesweeper-square.js","../../src/minesweeper-board.js"],"sourcesContent":["const valueSymbol = Symbol();\n\nexport function memoize(cb) {\n  const memos = new Map();\n  return function(...args) {\n    let memo = memos;\n    let i = 0;\n    let ct = args.length;\n    while (memo.has(args[i]) && i < ct - 1) {\n      memo = memo.get(args[i]);\n      i += 1;\n    }\n    if (i === ct - 1 && memo.has(valueSymbol)) {\n      memo = memo.get(valueSymbol);\n    } else {\n      while (i < ct) {\n        memo.set(args[i], new Map());\n        memo = memo.get(args[i]);\n        i += 1;\n      }\n      memo.set(valueSymbol, cb(...args));\n      memo = memo.get(valueSymbol);\n    }\n    return memo;\n  }\n}\n","export const squareMachine = {\n  initial: 'INIT',\n  states: {\n    INIT: {\n      on: {\n        MINE: 'MINE',\n        NOT_MINE: 'NOT_MINE',\n      },\n    },\n    NOT_MINE: {\n      on: {\n        MARKED: 'MARKED',\n        PLAYED: 'PLAYED',\n      }\n    },\n    MINE: {\n      on: {\n        MARKED: 'MARKED_MINE',\n        PLAYED: 'TRIPPED',\n      }\n    },\n    MARKED: {\n      on: {\n        UNMARKED: 'NOT_MINE',\n      }\n    },\n    PLAYED: {\n      on: {}\n    },\n    MARKED_MINE: {\n      on: {\n        UNMARKED: 'MINE',\n      }\n    },\n    TRIPPED: {\n      on: {},\n    }\n  }\n};\n\nexport const squareTransition = (state, event) => {\n  if (!state) return squareMachine.initial;\n  return squareMachine.states[state].on[event] || state;\n}\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst classMapCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    // handle static classes\n    if (!classMapCache.has(part)) {\n        element.className = committer.strings.join(' ');\n    }\n    const { classList } = element;\n    // remove old classes that no longer apply\n    const oldInfo = classMapCache.get(part);\n    for (const name in oldInfo) {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n        }\n    }\n    // add new classes\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        if (!oldInfo || value !== oldInfo[name]) {\n            // We explicitly want a loose truthy check here because\n            // it seems more convenient that '' and 0 are skipped.\n            const method = value ? 'add' : 'remove';\n            classList[method](name);\n        }\n    }\n    classMapCache.set(part, classInfo);\n});\n//# sourceMappingURL=class-map.js.map","import { LitElement, html, css } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\n\nclass MinesweeperSquare extends LitElement {\n  static get properties() {\n    return {\n      canFocus: { type: Boolean, attribute: 'can-focus' },\n      neighbors: { type: Number },\n      state: { type: String },\n      column: { type: Number },\n      row: { type: Number },\n    };\n  }\n  constructor() {\n    super();\n    this.state = 'INIT';\n    this.neighbors = 0;\n    this.column = 0;\n    this.row = 0;\n  }\n\n  _dangerLevel() {\n    switch (this.state) {\n      case 'MARKED':\n      case 'MARKED_MINE':\n        return 'm';\n      case 'TRIPPED':\n        return 'x';\n      case 'PLAYED':\n        return this.neighbors || '';\n      case 'MINE':\n      case 'NOT_MINE':\n      default:\n        return '';\n    }\n  }\n\n  play() {\n    if (['MARKED','MARKED_MINE'].includes(this.state)) return;\n    this.dispatchEvent(new CustomEvent('minesweeper-played'));\n  }\n\n  mark(e) {\n    e.preventDefault();\n    if (this.state === 'PLAYED') {\n      this.play();\n      return;\n    }\n    this.dispatchEvent(\n      new CustomEvent('minesweeper-marked', {\n        detail: {\n          marked: ['MARKED','MARKED_MINE'].includes(this.state)\n        }\n      }),\n    );\n  }\n\n  focus() {\n    this.shadowRoot.querySelector('button').focus();\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: flex;\n          line-height: var(--minesweeper-square-size, 25px);\n          text-align: center;\n        }\n        .square {\n          cursor: pointer;\n          box-sizing: border-box;\n          width: 100%;\n          height: 100%;\n          border: 4px outset;\n          background: var(--color-square-background, #cecece);\n          font-weight: bold;\n          font-family: monospace;\n          font-size: 2em;\n          -webkit-user-select: none; /* Chrome all / Safari all */\n          -moz-user-select: none; /* Firefox all */\n          -ms-user-select: none; /* IE 10+ */\n          user-select: none; /* Likely future */\n        }\n        .square:focus {\n          transform: translateZ(0);\n          outline: 2px solid var(--color-square-focus, blue);\n          outline-offset: -10px;\n        }\n        .played {\n          border: 1px solid var(--color-square-border, #999);\n        }\n        .played:focus {\n          outline-offset: -5px;\n        }\n        .low {\n          color: var(--color-danger-low, blue);\n        }\n        .medium {\n          color: var(--color-danger-medium, green);\n        }\n        .high {\n          color: var(--color-danger-high, red);\n        }\n        .worry {\n          color: var(--color-danger-worry, darkred);\n        }\n        .dead {\n          background: var(--color-dead, red);\n        }\n      `,\n    ];\n  }\n\n  testDangerLevel(dangerLevel, threashold = -1) {\n    return this.state === 'PLAYED' && dangerLevel > threashold;\n  }\n\n  get squareType() {\n    switch (this.state) {\n      case 'PLAYED':\n        return 'Played';\n      case 'MARKED':\n      case 'MARKED_MINE':\n        return 'Marked';\n      default:\n        return 'Playable';\n    }\n  }\n\n  render() {\n    const dangerLevel = this._dangerLevel();\n    return html`\n      <button\n        class=${classMap({\n          square: true,\n          played: ['PLAYED','TRIPPED'].includes(this.state),\n          low: this.testDangerLevel(dangerLevel),\n          medium: this.testDangerLevel(dangerLevel, 1),\n          high: this.testDangerLevel(dangerLevel, 2),\n          worry: this.testDangerLevel(dangerLevel, 5),\n          dead: this.state === 'TRIPPED',\n        })}\n        tabindex=${this.canFocus ? '0' : '-1'}\n        @click=${this.play}\n        @contextmenu=${this.mark}\n        aria-label=${`${this.squareType} Square: Column ${this.column +\n          1}, Row ${this.column + 1}`}\n      >\n        ${dangerLevel}\n      </button>\n    `;\n  }\n}\n\ncustomElements.define('minesweeper-square', MinesweeperSquare);\n","import { LitElement, html, css } from 'lit-element';\n\nimport { memoize } from './memoize.js';\nimport { squareTransition } from './square-machine.js';\nimport { defaultBoard } from './minesweeper-app.js';\nimport './minesweeper-square.js';\n\nconst status = {\n  DEAD: 'dead',\n  PLAYING: 'playing',\n};\n\nconst defaultFocusedSquare = [0, 0];\nlet calls = 0;\n\nclass MinesweeperBoard extends LitElement {\n  static get properties() {\n    return {\n      moves: { type: Number },\n      board: { type: Array },\n      marks: { type: Number },\n      mines: { type: Number },\n      status: { type: String },\n      focusedSquare: { type: Array },\n    };\n  }\n\n  constructor() {\n    super();\n    this.board = defaultBoard;\n    this.moves = 0;\n    this.marks = 0;\n    this.mines = 0;\n    this.status = status.PLAYING;\n    this.focusedSquare = defaultFocusedSquare;\n    this.handleKeydown = this.handleKeydown.bind(this);\n  }\n\n  get board() {\n    return this._board;\n  }\n\n  set board(board) {\n    if (board === this.board) return;\n    const old = this.board;\n    this._board = board;\n    this.memoizedGetNeighboringMines = memoize(this._getNeighboringMines.bind(this));\n    this.requestUpdate('board', old);\n  }\n\n  _getNeighbors(across, down, ...needles) {\n    let neighbors = 0;\n    let square;\n    for (let i = -1; i <= 1; i += 1) {\n      if (this.board[across + i]) {\n        for (let j = -1; j <= 1; j += 1) {\n          square = this.board[across + i][down + j];\n          if (square) {\n            if (i !== 0 || j !== 0) {\n              if (needles.includes(square.state)) {\n                neighbors += 1;\n              }\n            }\n          }\n        }\n      }\n    }\n    return neighbors;\n  }\n\n  _getNeighboringMines(...args) {\n    return this._getNeighbors(...args, 'MINE', 'MARKED_MINE', 'TRIPPED');\n  }\n\n  _getNeighboringMarks(...args) {\n    return this._getNeighbors(...args, 'MARKED', 'MARKED_MINE');\n  }\n\n  _playNeighbors(across, down, unsafe) {\n    for (let i = -1; i <= 1; i += 1) {\n      if (this.board[across + i]) {\n        for (let j = -1; j <= 1; j += 1) {\n          const square = this.board[across + i][down + j];\n          if (square) {\n            if (unsafe || square.state === 'NOT_MINE') {\n              square.state = squareTransition(square.state, 'PLAYED');\n              if (square.state === 'TRIPPED') {\n                this.status = status.DEAD;\n              } else if (\n                !['MARKED','MARKED_MINE'].includes(square.state) &&\n                this.memoizedGetNeighboringMines(across + i, down + j) === 0\n              ) {\n                this._playNeighbors(across + i, down + j);\n              }\n            }\n          }\n        }\n      }\n    }\n    this.moves += 1;\n  }\n\n  _played(e) {\n    if (this.status === status.DEAD) return;\n    const { column, row } = e.target;\n    const square = this.board[column][row];\n    this.focusedSquare = [column, row];\n    if (square.state === 'PLAYED') {\n      const unsafe = true;\n      if (this.memoizedGetNeighboringMines(column, row) === this._getNeighboringMarks(column, row)) {\n        this._playNeighbors(column, row, unsafe);\n      } else {\n        return;\n      }\n    } else if (square.state === 'MINE') {\n      this.status = status.DEAD;\n    } else if (!this.memoizedGetNeighboringMines(column, row)) {\n      this._playNeighbors(column, row);\n    }\n    square.state = squareTransition(square.state, 'PLAYED');\n    this.moves += 1;\n  }\n\n  _marked(e) {\n    const { column, row } = e.target;\n    const square = this.board[column][row];\n    this.focusedSquare = [column, row];\n    square.state = squareTransition(square.state, e.detail.marked ? 'UNMARKED' : 'MARKED');\n    this.marks += square.state === 'MARKED' || square.state === 'MARKED_MINE' ? 1 : -1;\n    this.moves += 1;\n  }\n\n  handleKeydown(e) {\n    let { column, row } = e.composedPath()[0].getRootNode().host;\n    const offset = e.shiftKey ? 5 : 1;\n    switch (e.key) {\n      case 'ArrowDown':\n        row = this.board[0].length + row + offset;\n        break;\n      case 'ArrowUp':\n        row = this.board[0].length + row - offset;\n        break;\n      case 'ArrowLeft':\n        column = this.board.length + column - offset;\n        break;\n      case 'ArrowRight':\n        column = this.board.length + column + offset;\n        break;\n      case 'm':\n        this.shadowRoot.querySelector(`[column=\"${column}\"][row=\"${row}\"]`).mark(e);\n        break;\n      default:\n        break;\n    }\n    this.focusedSquare = [column % this.board.length, row % this.board[0].length];\n  }\n\n  focusBoard() {\n    window.addEventListener('keydown', this.handleKeydown);\n  }\n\n  blurBoard() {\n    window.removeEventListener('keydown', this.handleKeydown);\n  }\n\n  isFocusedSquare(across, down) {\n    if (this.focusedSquare === defaultFocusedSquare) {\n      return across === 0 && down === 0;\n    }\n    return across === this.focusedSquare[0] && down === this.focusedSquare[1];\n  }\n\n  get focusedSquareSelector() {\n    const [column, row] = this.focusedSquare;\n    return `[column=\"${column}\"][row=\"${row}\"]`;\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          position: relative;\n          display: grid;\n          flex-grow: 1;\n          grid-auto-flow: column;\n          grid-template-columns: repeat(var(--columns), 1fr);\n          grid-template-rows: repeat(var(--rows), 1fr);\n        }\n        .status {\n          position: absolute;\n          bottom: 100%;\n          right: 0;\n          line-height: 48px;\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return html`\n      <div class=\"status\">\n        ${this.marks}/${this.mines}\n      </div>\n      ${this.board.map((column, across) =>\n        column.map(\n          (square, down) => html`\n            <minesweeper-square\n              state=${square.state}\n              neighbors=${this.memoizedGetNeighboringMines(across, down)}\n              column=${across}\n              row=${down}\n              ?can-focus=${this.isFocusedSquare(across, down)}\n              @minesweeper-played=${this._played}\n              @minesweeper-marked=${this._marked}\n              @focus=${this.focusBoard}\n              @blur=${this.blurBoard}\n            ></minesweeper-square>\n          `,\n        ),\n      )}\n    `;\n  }\n\n  updated(changes) {\n    if (changes.has('status') && this.status === status.DEAD) {\n      this.dispatchEvent(\n        new CustomEvent('minesweeper-game-over', { bubbles: true, composed: true }),\n      );\n    } else if (changes.has('mines')) {\n      this.marks = 0;\n      this.status = status.PLAYING;\n      this.focusedSquare = defaultFocusedSquare;\n    } else {\n      const square = this.shadowRoot.querySelector(this.focusedSquareSelector);\n      square.updateComplete.then(() => {\n        square.focus();\n      });\n    }\n  }\n}\n\ncustomElements.define('minesweeper-board', MinesweeperBoard);\n"],"names":["valueSymbol","Symbol","squareMachine","initial","states","INIT","on","MINE","NOT_MINE","MARKED","PLAYED","UNMARKED","MARKED_MINE","TRIPPED","squareTransition","state","event","classMapCache","WeakMap","classMap","directive","classInfo","part","AttributePart","PropertyPart","committer","name","parts","length","Error","element","has","className","strings","join","classList","oldInfo","get","remove","_name","value","set","MinesweeperSquare","neighbors","column","row","LitElement","canFocus","type","Boolean","attribute","Number","String","this","includes","dispatchEvent","CustomEvent","e","preventDefault","detail","marked","play","shadowRoot","querySelector","focus","dangerLevel","threashold","_dangerLevel","html","square","played","low","testDangerLevel","medium","high","worry","dead","mark","squareType","css","customElements","define","status","DEAD","PLAYING","defaultFocusedSquare","MinesweeperBoard","board","defaultBoard","moves","marks","mines","focusedSquare","handleKeydown","_this","bind","Array","across","down","needles","i","j","args","_getNeighbors","unsafe","memoizedGetNeighboringMines","_playNeighbors","target","_getNeighboringMarks","composedPath","getRootNode","host","offset","shiftKey","key","window","addEventListener","removeEventListener","map","_this2","isFocusedSquare","_played","_marked","focusBoard","blurBoard","changes","bubbles","composed","focusedSquareSelector","updateComplete","then","_board","cb","memos","old","_getNeighboringMines","Map","memo","ct","arguments","requestUpdate"],"mappings":"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"}