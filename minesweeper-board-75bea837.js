import{w as e,h as t,r as s,T as r,d as o}from"./minesweeper-app-b1102aad.js";const i=Symbol("value");const a={initial:"INIT",states:{INIT:{on:{MINE:"MINE",NOT_MINE:"NOT_MINE"}},NOT_MINE:{on:{MARKED:"MARKED",PLAYED:"PLAYED"}},MINE:{on:{MARKED:"MARKED_MINE",PLAYED:"TRIPPED"}},MARKED:{on:{UNMARKED:"NOT_MINE"}},PLAYED:{on:{}},MARKED_MINE:{on:{UNMARKED:"MINE"}},TRIPPED:{on:{}}}},n=(e,t)=>e?a.states[e].on[t]||e:a.initial,h=1;const u=(e=>(...t)=>({_$litDirective$:e,values:t}))(class extends class{constructor(e){}T(e,t,s){this.Σdt=e,this.M=t,this.Σct=s}S(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}{constructor(e){var t;if(super(e),e.type!==h||"class"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(e){return Object.keys(e).filter(t=>e[t]).join(" ")}update(t,[s]){if(void 0===this.bt){this.bt=new Set;for(const e in s)s[e]&&this.bt.add(e);return this.render(s)}const r=t.element.classList;this.bt.forEach(e=>{e in s||(r.remove(e),this.bt.delete(e))});for(const e in s){const t=!!s[e];t!==this.bt.has(e)&&(t?(r.add(e),this.bt.add(e)):(r.remove(e),this.bt.delete(e)))}return e}});customElements.define("minesweeper-square",class extends t{static get properties(){return{canFocus:{type:Boolean,attribute:"can-focus"},neighbors:{type:Number},state:{type:String},column:{type:Number},row:{type:Number}}}constructor(){super(),this.state="INIT",this.neighbors=0,this.column=0,this.row=0}_dangerLevel(){switch(this.state){case"MARKED":case"MARKED_MINE":return"m";case"TRIPPED":return"x";case"PLAYED":return this.neighbors||"";case"MINE":case"NOT_MINE":default:return""}}play(){["MARKED","MARKED_MINE"].includes(this.state)||this.dispatchEvent(new CustomEvent("minesweeper-played"))}mark(e){e.preventDefault(),"PLAYED"!==this.state?this.dispatchEvent(new CustomEvent("minesweeper-marked",{detail:{marked:["MARKED","MARKED_MINE"].includes(this.state)}})):this.play()}focus(){this.shadowRoot.querySelector("button").focus()}static get styles(){return[s`:host{display:flex;line-height:var(--minesweeper-square-size,25px);text-align:center}.square{cursor:pointer;box-sizing:border-box;width:100%;height:100%;border:4px outset;background:var(--color-square-background,#cecece);font-weight:700;font-family:monospace;font-size:2em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.square:focus{transform:translateZ(0);outline:2px solid var(--color-square-focus,#00f);outline-offset:-10px}.played{border:1px solid var(--color-square-border,#999)}.played:focus{outline-offset:-5px}.low{color:var(--color-danger-low,#00f)}.medium{color:var(--color-danger-medium,green)}.high{color:var(--color-danger-high,red)}.worry{color:var(--color-danger-worry,#8b0000)}.dead{background:var(--color-dead,red)}`]}testDangerLevel(e,t=-1){return"PLAYED"===this.state&&e>t}get squareType(){switch(this.state){case"PLAYED":return"Played";case"MARKED":case"MARKED_MINE":return"Marked";default:return"Playable"}}render(){const e=this._dangerLevel();return r`<button class="${u({square:!0,played:["PLAYED","TRIPPED"].includes(this.state),low:this.testDangerLevel(e),medium:this.testDangerLevel(e,1),high:this.testDangerLevel(e,2),worry:this.testDangerLevel(e,5),dead:"TRIPPED"===this.state})}" tabindex="${this.canFocus?"0":"-1"}" @click="${this.play}" @contextmenu="${this.mark}" aria-label="${`${this.squareType} Square: Column ${this.column+1}, Row ${this.column+1}`}">${e}</button>`}});const d={DEAD:"dead",PLAYING:"playing"},c=[0,0];customElements.define("minesweeper-board",class extends t{static get properties(){return{moves:{type:Number},board:{type:Array},marks:{type:Number},mines:{type:Number},status:{type:String},focusedSquare:{type:Array}}}constructor(){super(),this.board=o,this.moves=0,this.marks=0,this.mines=0,this.status=d.PLAYING,this.focusedSquare=c,this.handleKeydown=this.handleKeydown.bind(this)}get board(){return this._board}set board(e){if(e===this.board)return;const t=this.board;this._board=e,this.memoizedGetNeighboringMines=function(e){const t=new Map;return(...s)=>{let r=t,o=0;const a=s.length;for(;r.has(s[o])&&o<a-1;)r=r.get(s[o]),o+=1;if(o===a-1&&r.has(i))r=r.get(i);else{for(;o<a;)r.set(s[o],new Map),r=r.get(s[o]),o+=1;r.set(i,e(...s)),r=r.get(i)}return r}}(this._getNeighboringMines.bind(this)),this.requestUpdate("board",t)}_getNeighbors(e,t,...s){let r=0;return this._doNeighbors(e,t,e=>{s.includes(e.state)&&(r+=1)}),r}_doNeighbors(e,t,s){for(let r=-1;r<=1;r+=1)if(this.board[e+r])for(let o=-1;o<=1;o+=1){const i=this.board[e+r][t+o];!i||0===r&&0===o||s(i,r,o)}return 0}_getNeighboringMines(...e){return this._getNeighbors(...e,"MINE","MARKED_MINE","TRIPPED")}_getNeighboringMarks(...e){return this._getNeighbors(...e,"MARKED","MARKED_MINE")}_playNeighbors(e,t,s){this._doNeighbors(e,t,(r,o,i)=>{(s||"NOT_MINE"===r.state)&&(r.state=n(r.state,"PLAYED"),"TRIPPED"===r.state?this.status=d.DEAD:["MARKED","MARKED_MINE"].includes(r.state)||0!==this.memoizedGetNeighboringMines(e+o,t+i)||this._playNeighbors(e+o,t+i))}),this.moves+=1}_played(e){if(this.status===d.DEAD)return;const{column:t,row:s}=e.target,r=this.board[t][s];if(this.focusedSquare=[t,s],"PLAYED"===r.state){const e=!0;if(this.memoizedGetNeighboringMines(t,s)!==this._getNeighboringMarks(t,s))return;this._playNeighbors(t,s,e)}else"MINE"===r.state?this.status=d.DEAD:this.memoizedGetNeighboringMines(t,s)||this._playNeighbors(t,s);r.state=n(r.state,"PLAYED"),this.moves+=1}_marked(e){const{column:t,row:s}=e.target,r=this.board[t][s];this.focusedSquare=[t,s],r.state=n(r.state,e.detail.marked?"UNMARKED":"MARKED"),this.marks+="MARKED"===r.state||"MARKED_MINE"===r.state?1:-1,this.moves+=1}handleKeydown(e){let{column:t,row:s}=e.composedPath()[0].getRootNode().host;const r=e.shiftKey?5:1;switch(e.key){case"ArrowDown":s=this.board[0].length+s+r;break;case"ArrowUp":s=this.board[0].length+s-r;break;case"ArrowLeft":t=this.board.length+t-r;break;case"ArrowRight":t=this.board.length+t+r;break;case"m":this.shadowRoot.querySelector(`[column="${t}"][row="${s}"]`).mark(e)}this.focusedSquare=[t%this.board.length,s%this.board[0].length]}focusBoard(){window.addEventListener("keydown",this.handleKeydown)}blurBoard(){window.removeEventListener("keydown",this.handleKeydown)}isFocusedSquare(e,t){return this.focusedSquare===c?0===e&&0===t:e===this.focusedSquare[0]&&t===this.focusedSquare[1]}get focusedSquareSelector(){const[e,t]=this.focusedSquare;return`[column="${e}"][row="${t}"]`}static get styles(){return[s`:host{position:relative;display:grid;flex-grow:1;grid-auto-flow:column;grid-template-columns:repeat(var(--columns),1fr);grid-template-rows:repeat(var(--rows),1fr)}.status{position:absolute;bottom:100%;right:0;line-height:48px}`]}render(){return r`<div class="status">${this.marks}/${this.mines}</div>${this.board.map((e,t)=>e.map((e,s)=>r`<minesweeper-square .state="${e.state}" .neighbors="${this.memoizedGetNeighboringMines(t,s)}" column="${t}" row="${s}" ?can-focus="${this.isFocusedSquare(t,s)}" @minesweeper-played="${this._played}" @minesweeper-marked="${this._marked}" @focus="${this.focusBoard}" @blur="${this.blurBoard}"></minesweeper-square>`))}`}updated(e){if(e.has("status")&&this.status===d.DEAD)this.dispatchEvent(new CustomEvent("minesweeper-game-over",{bubbles:!0,composed:!0}));else if(e.has("mines"))this.marks=0,this.status=d.PLAYING,this.focusedSquare=c;else{const e=this.shadowRoot.querySelector(this.focusedSquareSelector);e.updateComplete.then(()=>{e.focus()})}}});
//# sourceMappingURL=minesweeper-board-75bea837.js.map
