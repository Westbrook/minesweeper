{"version":3,"file":"minesweeper-board-2bb44c18.js","sources":["../node_modules/lit-html/directives/class-map.js","../src/minesweeper-square.js","../src/minesweeper-board.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst classMapCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    // handle static classes\n    if (!classMapCache.has(part)) {\n        element.className = committer.strings.join(' ');\n    }\n    const { classList } = element;\n    // remove old classes that no longer apply\n    const oldInfo = classMapCache.get(part);\n    for (const name in oldInfo) {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n        }\n    }\n    // add new classes\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        if (!oldInfo || value !== oldInfo[name]) {\n            // We explicitly want a loose truthy check here because\n            // it seems more convenient that '' and 0 are skipped.\n            const method = value ? 'add' : 'remove';\n            classList[method](name);\n        }\n    }\n    classMapCache.set(part, classInfo);\n});\n//# sourceMappingURL=class-map.js.map","import { LitElement, html, css } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map.js';\n\nclass MinesweeperSquare extends LitElement {\n  static get properties() {\n    return {\n      canFocus: { type: Boolean, attribute: 'can-focus' },\n      mine: { type: Boolean },\n      neighbors: { type: Number },\n      played: { type: Boolean },\n      marked: { type: Boolean },\n      column: { type: Number },\n      row: { type: Number },\n    };\n  }\n\n  constructor() {\n    super();\n    this.mine = false;\n    this.neighbors = 0;\n    this.played = false;\n    this.marked = false;\n    this.column = 0;\n    this.row = 0;\n  }\n\n  _dangerLevel() {\n    if (this.marked) return 'm';\n    if (!this.played) return '';\n    if (this.mine) return 'X';\n    return this.neighbors || '';\n  }\n\n  play() {\n    if (this.marked) return;\n    this.dispatchEvent(new CustomEvent('minesweeper-played'));\n  }\n\n  mark(e) {\n    e.preventDefault();\n    if (this.played) {\n      this.play();\n      return;\n    }\n    this.dispatchEvent(\n      new CustomEvent('minesweeper-marked', { detail: { marked: this.marked } }),\n    );\n  }\n\n  focus() {\n    this.shadowRoot.querySelector('button').focus();\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: flex;\n          line-height: var(--minesweeper-square-size, 25px);\n          text-align: center;\n        }\n        .square {\n          cursor: pointer;\n          box-sizing: border-box;\n          width: 100%;\n          height: 100%;\n          border: 4px outset;\n          background: var(--color-square-background, #cecece);\n          font-weight: bold;\n          font-family: monospace;\n          font-size: 2em;\n          -webkit-user-select: none; /* Chrome all / Safari all */\n          -moz-user-select: none; /* Firefox all */\n          -ms-user-select: none; /* IE 10+ */\n          user-select: none; /* Likely future */\n        }\n        .square:focus {\n          transform: translateZ(0);\n          outline: 2px solid var(--color-square-focus, blue);\n          outline-offset: -10px;\n        }\n        .played {\n          border: 1px solid var(--color-square-border, #999);\n        }\n        .played:focus {\n          outline-offset: -5px;\n        }\n        .low {\n          color: var(--color-danger-low, blue);\n        }\n        .medium {\n          color: var(--color-danger-medium, green);\n        }\n        .high {\n          color: var(--color-danger-high, red);\n        }\n        .worry {\n          color: var(--color-danger-worry, darkred);\n        }\n        .dead {\n          background: var(--color-dead, red);\n        }\n      `,\n    ];\n  }\n\n  testDangerLevel(dangerLevel, threashold = -1) {\n    return !this.mine && this.played && dangerLevel > threashold;\n  }\n\n  render() {\n    const dangerLevel = this._dangerLevel();\n    return html`\n      <button\n        class=${classMap({\n          square: true,\n          played: this.played,\n          low: this.testDangerLevel(dangerLevel),\n          medium: this.testDangerLevel(dangerLevel, 1),\n          high: this.testDangerLevel(dangerLevel, 2),\n          worry: this.testDangerLevel(dangerLevel, 5),\n          dead: this.played && this.mine,\n        })}\n        tabindex=${this.canFocus ? '0' : '-1'}\n        @click=${this.play}\n        @contextmenu=${this.mark}\n        aria-label=${`${this.played ? 'Played' : 'Playable'} Square: Column ${this.column +\n          1}, Row ${this.column + 1}`}\n      >\n        ${dangerLevel}\n      </button>\n    `;\n  }\n}\n\ncustomElements.define('minesweeper-square', MinesweeperSquare);\n","import { LitElement, html, css } from 'lit-element';\n\nimport './minesweeper-square.js';\n\nconst status = {\n  DEAD: 'dead',\n  PLAYING: 'playing',\n};\n\nconst defaultFocusedSquare = [0, 0];\n\nclass MinesweeperBoard extends LitElement {\n  static get properties() {\n    return {\n      board: { type: Array },\n      marks: { type: Number },\n      mines: { type: Number },\n      status: { type: String },\n      focusedSquare: { type: Array },\n    };\n  }\n\n  constructor() {\n    super();\n    this.board = [];\n    this.marks = 0;\n    this.mines = 0;\n    this.status = status.PLAYING;\n    this.focusedSquare = defaultFocusedSquare;\n    this.handleKeydown = this.handleKeydown.bind(this);\n  }\n\n  _getNeighbors(across, down, needle) {\n    let neighbors = 0;\n    let square;\n    for (let i = -1; i <= 1; i += 1) {\n      if (this.board[across + i]) {\n        for (let j = -1; j <= 1; j += 1) {\n          square = this.board[across + i][down + j];\n          if (square) {\n            if (i !== 0 || j !== 0) {\n              if (square[needle]) {\n                neighbors += 1;\n              }\n            }\n          }\n        }\n      }\n    }\n    return neighbors;\n  }\n\n  _getNeighboringMines(...args) {\n    return this._getNeighbors(...args, 'mine');\n  }\n\n  _getNeighboringMarks(...args) {\n    return this._getNeighbors(...args, 'marked');\n  }\n\n  _playNeighbors(across, down, unsafe) {\n    for (let i = across - 1; i <= across + 1; i += 1) {\n      if (this.board[i]) {\n        for (let j = down - 1; j <= down + 1; j += 1) {\n          if (this.board[i][j]) {\n            const square = this.board[i][j];\n            if ((unsafe || !square.mine) && !square.played && !square.marked) {\n              square.played = true;\n              if (square.mine) {\n                this.status = status.DEAD;\n              }\n              if (!this._getNeighboringMines(i, j)) this._playNeighbors(i, j);\n            }\n          }\n        }\n      }\n    }\n    this.board = [...this.board];\n  }\n\n  _played(e) {\n    if (this.status === status.DEAD) return;\n    const { column, row } = e.target;\n    const square = this.board[column][row];\n    this.focusedSquare = [column, row];\n    if (square.played) {\n      const unsafe = true;\n      if (this._getNeighboringMines(column, row) === this._getNeighboringMarks(column, row)) {\n        this._playNeighbors(column, row, unsafe);\n      } else {\n        return;\n      }\n    } else if (square.mine) {\n      this.status = status.DEAD;\n    } else if (!this._getNeighboringMines(column, row)) {\n      this._playNeighbors(column, row);\n    }\n    square.played = true;\n    this.board = [...this.board];\n  }\n\n  _marked(e) {\n    const { column, row } = e.target;\n    const square = this.board[column][row];\n    this.focusedSquare = [column, row];\n    square.marked = !e.detail.marked;\n    this.marks += square.marked ? 1 : -1;\n    this.board = [...this.board];\n  }\n\n  handleKeydown(e) {\n    let { column, row } = e.composedPath()[0].getRootNode().host;\n    const offset = e.shiftKey ? 5 : 1;\n    switch (e.key) {\n      case 'ArrowDown':\n        row = this.board[0].length + row + offset;\n        break;\n      case 'ArrowUp':\n        row = this.board[0].length + row - offset;\n        break;\n      case 'ArrowLeft':\n        column = this.board.length + column - offset;\n        break;\n      case 'ArrowRight':\n        column = this.board.length + column + offset;\n        break;\n      case 'm':\n        this.shadowRoot.querySelector(`[column=\"${column}\"][row=\"${row}\"]`).mark(e);\n        break;\n      default:\n        break;\n    }\n    this.focusedSquare = [column % this.board[0].length, row % this.board.length];\n  }\n\n  focusBoard() {\n    window.addEventListener('keydown', this.handleKeydown);\n  }\n\n  blurBoard() {\n    window.removeEventListener('keydown', this.handleKeydown);\n  }\n\n  isFocusedSquare(across, down) {\n    if (this.focusedSquare === defaultFocusedSquare) {\n      return across === 0 && down === 0;\n    }\n    return across === this.focusedSquare[0] && down === this.focusedSquare[1];\n  }\n\n  get focusedSquareSelector() {\n    const [column, row] = this.focusedSquare;\n    return `[column=\"${column}\"][row=\"${row}\"]`;\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          position: relative;\n          display: grid;\n          flex-grow: 1;\n          grid-auto-flow: column;\n          grid-template-columns: repeat(var(--columns), 1fr);\n          grid-template-rows: repeat(var(--rows), 1fr);\n        }\n        .status {\n          position: absolute;\n          bottom: 100%;\n          right: 0;\n          line-height: 48px;\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return html`\n      <div class=\"status\">\n        ${this.marks}/${this.mines}\n      </div>\n      ${this.board.map((column, across) =>\n        column.map(\n          (square, down) => html`\n            <minesweeper-square\n              .mine=${square.mine}\n              .marked=${square.marked}\n              .neighbors=${this._getNeighboringMines(across, down)}\n              .played=${square.played}\n              column=${across}\n              row=${down}\n              ?can-focus=${this.isFocusedSquare(across, down)}\n              @minesweeper-played=${this._played}\n              @minesweeper-marked=${this._marked}\n              @focus=${this.focusBoard}\n              @blur=${this.blurBoard}\n            ></minesweeper-square>\n          `,\n        ),\n      )}\n    `;\n  }\n\n  updated(changes) {\n    if (changes.has('status') && this.status === status.DEAD) {\n      this.dispatchEvent(\n        new CustomEvent('minesweeper-game-over', { bubbles: true, composed: true }),\n      );\n    } else if (changes.has('mines')) {\n      this.marks = 0;\n      this.status = status.PLAYING;\n      this.focusedSquare = defaultFocusedSquare;\n    } else {\n      const square = this.shadowRoot.querySelector(this.focusedSquareSelector);\n      square.updateComplete.then(() => {\n        square.focus();\n      });\n    }\n  }\n}\n\ncustomElements.define('minesweeper-board', MinesweeperBoard);\n"],"names":["classMapCache","WeakMap","classMap","directive","classInfo","part","AttributePart","PropertyPart","committer","name","parts","length","Error","element","has","className","strings","join","classList","oldInfo","get","remove","value","set","customElements","define","LitElement","canFocus","type","Boolean","attribute","mine","neighbors","Number","played","marked","column","row","constructor","_dangerLevel","this","play","dispatchEvent","CustomEvent","mark","e","preventDefault","detail","focus","shadowRoot","querySelector","css","testDangerLevel","dangerLevel","threashold","render","html","square","low","medium","high","worry","dead","status","DEAD","PLAYING","defaultFocusedSquare","board","Array","marks","mines","String","focusedSquare","handleKeydown","bind","_getNeighbors","across","down","needle","i","j","_getNeighboringMines","args","_getNeighboringMarks","_playNeighbors","unsafe","_played","target","_marked","composedPath","getRootNode","host","offset","shiftKey","key","focusBoard","window","addEventListener","blurBoard","removeEventListener","isFocusedSquare","map","updated","changes","bubbles","composed","focusedSquareSelector","updateComplete","then"],"mappings":"6EAyBA,MAAMA,EAAgB,IAAIC,QAYbC,EAAWC,EAAWC,GAA0BC,SACrDA,aAAgBC,IAAmBD,aAAgBE,GAC7B,UAAxBF,EAAKG,UAAUC,MAAoBJ,EAAKG,UAAUE,MAAMC,OAAS,QAC7D,IAAIC,MACN,oHAIAJ,UAACA,GAAaH,GACdQ,QAACA,GAAWL,EAGbR,EAAcc,IAAIT,KACrBQ,EAAQE,UAAYP,EAAUQ,QAAQC,KAAK,YAGvCC,UAACA,GAAaL,EAGdM,EAAUnB,EAAcoB,IAAIf,OAC7B,MAAMI,KAAQU,EACXV,KAAQL,GACZc,EAAUG,OAAOZ,OAKhB,MAAMA,KAAQL,EAAW,OACtBkB,EAAQlB,EAAUK,OACnBU,GAAWG,IAAUH,EAAQV,GAAO,CAIvCS,EADeI,EAAQ,MAAQ,UACbb,IAGtBT,EAAcuB,IAAIlB,EAAMD,olDC8D1BoB,eAAeC,OAAO,qBApItB,cAAgCC,gCAErB,CACLC,SAAU,CAAEC,KAAMC,QAASC,UAAW,aACtCC,KAAM,CAAEH,KAAMC,SACdG,UAAW,CAAEJ,KAAMK,QACnBC,OAAQ,CAAEN,KAAMC,SAChBM,OAAQ,CAAEP,KAAMC,SAChBO,OAAQ,CAAER,KAAMK,QAChBI,IAAK,CAAET,KAAMK,SAIjBK,2BAEOP,MAAO,OACPC,UAAY,OACZE,QAAS,OACTC,QAAS,OACTC,OAAS,OACTC,IAAM,EAGbE,sBACMC,KAAKL,OAAe,IACnBK,KAAKN,OACNM,KAAKT,KAAa,IACfS,KAAKR,WAAa,GAFA,GAK3BS,OACMD,KAAKL,aACJO,cAAc,IAAIC,YAAY,uBAGrCC,KAAKC,GACHA,EAAEC,iBACEN,KAAKN,YACFO,YAGFC,cACH,IAAIC,YAAY,qBAAsB,CAAEI,OAAQ,CAAEZ,OAAQK,KAAKL,WAInEa,aACOC,WAAWC,cAAc,UAAUF,kCAIjC,CACLG,QAmDJC,gBAAgBC,OAAaC,0DAAc,SACjCd,KAAKT,MAAQS,KAAKN,QAAUmB,EAAcC,EAGpDC,eACQF,EAAcb,KAAKD,sBAClBiB,MAEKtD,EAAS,CACfuD,QAAQ,EACRvB,OAAQM,KAAKN,OACbwB,IAAKlB,KAAKY,gBAAgBC,GAC1BM,OAAQnB,KAAKY,gBAAgBC,EAAa,GAC1CO,KAAMpB,KAAKY,gBAAgBC,EAAa,GACxCQ,MAAOrB,KAAKY,gBAAgBC,EAAa,GACzCS,KAAMtB,KAAKN,QAAUM,KAAKT,OAEjBS,KAAKb,SAAW,IAAM,KACxBa,KAAKC,KACCD,KAAKI,eACJJ,KAAKN,OAAS,SAAW,sCAA6BM,KAAKJ,OACzE,mBAAUI,KAAKJ,OAAS,GAExBiB,YC7HJU,EAAS,CACbC,KAAM,OACNC,QAAS,WAGLC,EAAuB,CAAC,EAAG,GAoNjC1C,eAAeC,OAAO,oBAlNtB,cAA+BC,gCAEpB,CACLyC,MAAO,CAAEvC,KAAMwC,OACfC,MAAO,CAAEzC,KAAMK,QACfqC,MAAO,CAAE1C,KAAMK,QACf8B,OAAQ,CAAEnC,KAAM2C,QAChBC,cAAe,CAAE5C,KAAMwC,QAI3B9B,2BAEO6B,MAAQ,QACRE,MAAQ,OACRC,MAAQ,OACRP,OAASA,EAAOE,aAChBO,cAAgBN,OAChBO,cAAgBjC,KAAKiC,cAAcC,KAAKlC,MAG/CmC,cAAcC,EAAQC,EAAMC,OAEtBrB,EADAzB,EAAY,MAEX,IAAI+C,GAAK,EAAGA,GAAK,EAAGA,GAAK,KACxBvC,KAAK2B,MAAMS,EAASG,OACjB,IAAIC,GAAK,EAAGA,GAAK,EAAGA,GAAK,GAC5BvB,EAASjB,KAAK2B,MAAMS,EAASG,GAAGF,EAAOG,MAE3B,IAAND,GAAiB,IAANC,GACTvB,EAAOqB,KACT9C,GAAa,WAOlBA,EAGTiD,kDAAwBC,2BAAAA,yBACf1C,KAAKmC,iBAAiBO,EAAM,QAGrCC,kDAAwBD,2BAAAA,yBACf1C,KAAKmC,iBAAiBO,EAAM,UAGrCE,eAAeR,EAAQC,EAAMQ,OACtB,IAAIN,EAAIH,EAAS,EAAGG,GAAKH,EAAS,EAAGG,GAAK,KACzCvC,KAAK2B,MAAMY,OACR,IAAIC,EAAIH,EAAO,EAAGG,GAAKH,EAAO,EAAGG,GAAK,KACrCxC,KAAK2B,MAAMY,GAAGC,GAAI,OACdvB,EAASjB,KAAK2B,MAAMY,GAAGC,IACxBK,GAAW5B,EAAO1B,MAAU0B,EAAOvB,QAAWuB,EAAOtB,SACxDsB,EAAOvB,QAAS,EACZuB,EAAO1B,YACJgC,OAASA,EAAOC,MAElBxB,KAAKyC,qBAAqBF,EAAGC,IAAIxC,KAAK4C,eAAeL,EAAGC,SAMlEb,MAAQ,IAAI3B,KAAK2B,OAGxBmB,QAAQzC,MACFL,KAAKuB,SAAWA,EAAOC,KAAM,aAC3B5B,OAAEA,EAAFC,IAAUA,GAAQQ,EAAE0C,OACpB9B,EAASjB,KAAK2B,MAAM/B,GAAQC,WAC7BmC,cAAgB,CAACpC,EAAQC,GAC1BoB,EAAOvB,OAAQ,OACXmD,GAAS,KACX7C,KAAKyC,qBAAqB7C,EAAQC,KAASG,KAAK2C,qBAAqB/C,EAAQC,eAC1E+C,eAAehD,EAAQC,EAAKgD,QAI1B5B,EAAO1B,UACXgC,OAASA,EAAOC,KACXxB,KAAKyC,qBAAqB7C,EAAQC,SACvC+C,eAAehD,EAAQC,GAE9BoB,EAAOvB,QAAS,OACXiC,MAAQ,IAAI3B,KAAK2B,OAGxBqB,QAAQ3C,SACAT,OAAEA,EAAFC,IAAUA,GAAQQ,EAAE0C,OACpB9B,EAASjB,KAAK2B,MAAM/B,GAAQC,QAC7BmC,cAAgB,CAACpC,EAAQC,GAC9BoB,EAAOtB,QAAUU,EAAEE,OAAOZ,YACrBkC,OAASZ,EAAOtB,OAAS,GAAK,OAC9BgC,MAAQ,IAAI3B,KAAK2B,OAGxBM,cAAc5B,OACRT,OAAEA,EAAFC,IAAUA,GAAQQ,EAAE4C,eAAe,GAAGC,cAAcC,WAClDC,EAAS/C,EAAEgD,SAAW,EAAI,SACxBhD,EAAEiD,SACH,YACHzD,EAAMG,KAAK2B,MAAM,GAAGxD,OAAS0B,EAAMuD,YAEhC,UACHvD,EAAMG,KAAK2B,MAAM,GAAGxD,OAAS0B,EAAMuD,YAEhC,YACHxD,EAASI,KAAK2B,MAAMxD,OAASyB,EAASwD,YAEnC,aACHxD,EAASI,KAAK2B,MAAMxD,OAASyB,EAASwD,YAEnC,SACE3C,WAAWC,iCAA0Bd,qBAAiBC,SAASO,KAAKC,QAKxE2B,cAAgB,CAACpC,EAASI,KAAK2B,MAAM,GAAGxD,OAAQ0B,EAAMG,KAAK2B,MAAMxD,QAGxEoF,aACEC,OAAOC,iBAAiB,UAAWzD,KAAKiC,eAG1CyB,YACEF,OAAOG,oBAAoB,UAAW3D,KAAKiC,eAG7C2B,gBAAgBxB,EAAQC,UAClBrC,KAAKgC,gBAAkBN,EACP,IAAXU,GAAyB,IAATC,EAElBD,IAAWpC,KAAKgC,cAAc,IAAMK,IAASrC,KAAKgC,cAAc,qCAIhEpC,EAAQC,GAAOG,KAAKgC,uCACRpC,qBAAiBC,kCAI7B,CACLc,QAmBJI,gBACSC,MAEDhB,KAAK6B,MAAS7B,KAAK8B,MAErB9B,KAAK2B,MAAMkC,IAAI,CAACjE,EAAQwC,IACxBxC,EAAOiE,IACL,CAAC5C,EAAQoB,IAASrB,MAENC,EAAO1B,KACL0B,EAAOtB,OACJK,KAAKyC,qBAAqBL,EAAQC,GACrCpB,EAAOvB,OACR0C,EACHC,EACOrC,KAAK4D,gBAAgBxB,EAAQC,GACpBrC,KAAK8C,QACL9C,KAAKgD,QAClBhD,KAAKuD,WACNvD,KAAK0D,cAQzBI,QAAQC,MACFA,EAAQzF,IAAI,WAAa0B,KAAKuB,SAAWA,EAAOC,UAC7CtB,cACH,IAAIC,YAAY,wBAAyB,CAAE6D,SAAS,EAAMC,UAAU,UAEjE,GAAIF,EAAQzF,IAAI,cAChBuD,MAAQ,OACRN,OAASA,EAAOE,aAChBO,cAAgBN,MAChB,OACCT,EAASjB,KAAKS,WAAWC,cAAcV,KAAKkE,uBAClDjD,EAAOkD,eAAeC,KAAK,KACzBnD,EAAOT"}